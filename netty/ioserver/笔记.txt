    Netty 入门教程——传统IO与NIO比较

传统IO特点
阻塞点
server.accept();
inputStream.read(bytes);

单线程情况下只能有一个客户端

用线程池可以有多个客户端，但是非常消耗性能



NIO特点

ServerSocketChannel  ServerSocket

SocketChannel        Socket

Selector

SelectionKey

NIO的一些疑问

1、客户端关闭时会抛出异常，死循环
解决方案
       int read = channel.read(buffer);
       if(read>0){
            byte[] data = buffer.array();
            String msg = new String(data,0,read);
            System.out.println(msg);

            // 回写数据
            ByteBuffer outBuffer = ByteBuffer.wrap("好的".getBytes());
            channel.write(outBuffer);
       } else{
            System.out.println("客户端关闭");
            key.cancel();
       }

2、selector.select(); 阻塞，那为什么说nio是非阻塞IO？

    selector.select();
    selector.select(1000); 不阻塞
    selector.wakeup(); 也可以唤醒selector
    selector.selectNow(); 也可以立马返回。


3、SelectionKey.OP_WRITE 是什么意思
OP_WRITE表示底层缓冲区是否有空间，是则响应返还true

