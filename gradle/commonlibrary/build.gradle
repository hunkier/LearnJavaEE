plugins {
    id 'groovy'
    id 'java'
}

/**
 * 扩展属性
 *
 */
ext {
    libJunit = "junit:junit:4.12"
}

/**
 * 引用外部扩展属性，母module引用一次，所有字module都可以使用
 */
apply from:  this.file('common.gradle')

group 'cn.hunkier'
version '1.0'

// 引用common.gradle中定义的java版本
sourceCompatibility = this.java['javaVersion']
targetCompatibility = rootProject.ext.java.javaVersion

repositories {
    mavenCentral()
}

dependencies {
//    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    compile (
            rootProject.ext.dependencies.groovyAll
    )
    // 引用扩展属性
//    testCompile this.libJunit
    testCompile rootProject.ext.dependencies.junit
}




/**
 *  配置阶段开始前的监听回调
 */
this.beforeEvaluate {}

/**
 * 配置阶段完成后的回调
 */
this.afterEvaluate {
    println '配置阶段执行完毕'
}
/**
 * gradle执行完毕后的回调监听
 */
this.gradle.buildFinished {
    println '执行阶段执行完毕'
}

this.gradle.beforeProject {}
this.gradle.afterProject {}
//this.gradle.addBuildListener()

/**
 *  project 相关api讲解
 */
this.getProjects()
this.getSubProjects()
//this.getParentProject()
this.getRootP()

def getProjects(){
    println '---------------------'
    println '----Root Project-----'
    println '---------------------'
    this.getAllprojects().eachWithIndex { Project project, int index ->
        if(index ==0){
            println "Root project : ${project.name}"
        }else{
            println "+--- project : ${project.name}"
        }
    }
}

def getSubProjects(){
    println '---------------------'
    println '---- Sub Project-----'
    println '---------------------'
    this.getSubprojects().eachWithIndex { Project project, int index ->
       
            println "+--- project : ${project.name}"
        
    }
}

def getParentProject(){
    def name = this.getParent().name
    println "the parent project name is : ${name}"
}

def getRootP(){
    def name = this.getRootProject().name
    println "the Root project name is : ${name}"
}

// 单独配置子项目
project('app'){ Project project ->
//    println project.name
    apply plugin : 'eclipse'
    dependencies {}
    tasks {}
}

// 配置当前节点所有的项目和项目下的子项目
allprojects {
    group 'cn.hunk'
    version '1.0.0'
}

println project('test').group

// 不包括当前节点工程，只包括它的subproject
subprojects {Project project ->
    // android的library项目需要上传maven私服
    if (project.plugins.hasPlugin('com.android.library')){
        apply from: '../publishToMaven.gradle'
    }
}

// 定义子项目共有的扩展属性
subprojects { Project project ->
    /**
     * 扩展属性
     *
     */
    ext {
        libJunit = "junit:junit:4.12"
    }
}

/**
 * 文件操作相关api
 *
 */
println  "the root file name is " + getRootDir().name
println  "the root file path is " + getRootDir().absolutePath
println  "the build file path is "+getBuildDir().absolutePath
println  "the project file path is "+getProjectDir().absolutePath

println 'setting.gradle 文件内容： \r\n'+getContext('settings.gradle')

/**
 * 获取文件内容
 * @param path
 * @return
 */
def getContext(String path){
    try{
        def file = file(path)
        // 相对于当前的project工程开始查找
        return file.text
    }catch(GradleException e){
        println 'file not found'
    }
    return  null
}


