import groovy.xml.MarkupBuilder
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google() // here
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}
//allprojects {
//    repositories {
//        google() // and here
//        jcenter()
//    }
//}

plugins {
    id 'groovy'
    id 'java'
//    id 'android'
}

apply from : this.rootProject.file('publishToMaven.gradle')
//apply from : this.rootProject.file('releaseinfo.gradle')
// 引用自定义插件
apply plugin: 'cn.hunkier.gradle.study'
group 'cn.hunkier'
version '1.0'

// 引用common.gradle中定义的java版本
sourceCompatibility = rootProject.ext.java['javaVersion']
targetCompatibility = rootProject.ext.java.javaVersion

repositories {
    maven {
        name 'aliyun'
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
        credentials { // 私服帐号密码
            username = 'admin'
            password = 'admin123'
        }
    }
    mavenCentral()
}
/*
android{
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res-ad',
                    'src/main/res-player'
            ]
        } 
    }
}


this.android.sourceSets {
    main {
        res.srcDirs = [
                'src/main/res',
                'src/main/res-ad',
                'src/main/res-player'
        ]
    }
}
*/

dependencies {
//    compile 'org.codehaus.groovy:groovy-all:4.10.2'
    compile 'org.codehaus.groovy:groovy-all:2.4.15'
//    testCompile group: 'junit', name: 'junit', version: '4.12'
    // 引用子项目的扩展属性
    testCompile this.libJunit
    // 应用父项目的扩展属性
    testCompile this.rootProject.libJunit
}

/**
 * 为自定义插件传递参数
 */
hunkierReleaseInfo {
    versionCode = rootProject.ext.android.versionCode
    versionName = rootProject.ext.android.versionName
    versionInfo = '测试自定义插件'
    fileName = 'releases.xml'
}

this.getParentProject()

def getParentProject(){
    def name = this.getParent().name
    println "the parent project name is : ${name}"
}


/**
 * 文件复制
 */
copy {
    from file('../settings.gradle')
    into getRootProject().getBuildDir()
}

// 对文件树进行遍历
fileTree('build'){ FileTree fileTree->
    fileTree.visit { FileTreeElement element->
        println 'the file name is: ' + element.file.name
        copy {
            from element.file
            into getRootProject().getBuildDir().path + '/app'
        }
    }
}

// 添加任务
task(name: 'libscopy'){
    doLast {
        // gradle的执行阶段去执行
        def sourcePath = this.buildDir + '/libs'
        def desationPath = this.rootProject.buildDir
        def command = "mv -rf ${sourcePath} ${desationPath}"
        exec {
            try{
                executable 'bash'
                args '-c', command
                println 'the command is execute success.'
            }catch(GradleException e){
                println 'the command is execute failed.'
            }
        }
    }
}

// 直接通过task函数去创建
task(helloTask(group: 'hunkier', description: 'task study') {
    println 'i am helloTask.'

    doFirst {
        println 'this task group is: ' + group
    }

    doFirst {}
})

helloTask.doFirst {
    println 'the task description is: ' + description
}

// 通过TaskContainer去创建Task
this.tasks.create(name: 'helloTask2'){
    setGroup('hunkier')
    setDescription('task study')
    println 'i am helloTask2.'
}


// 计算build执行时长
def startBuildTime, endBuildTime
this.afterEvaluate { Project project ->
    // 保证要找的task已经配置完毕
    project.tasks.eachWithIndex { Task task, int index ->
        println "${index} :  ${task.name}"
        def taskName = task.name
        task.doFirst {
            println "${taskName} : "+System.currentTimeMillis()
        }

    }
    def preBuildTask = project.tasks.getByName('classes')
    preBuildTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println 'the start time is: ' + startBuildTime
    }

    def buildTask = project.tasks.getByName('build')
    buildTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println 'the end time is: ' + endBuildTime
        println "the build time is: ${endBuildTime - startBuildTime}"
    }

}

/**
 * task输入输出讲解
 */
ext {
    versionName = '1.0.0'
    versionCode = '100'
    versionInfo = 'App的第一个版本，上线了一些基础的核心功能'
    destFile =file( 'releases.xml')
//    destFile =new File(this.buildDir, 'releases.xml')
    if(destFile!=null && !destFile.exists()){
        destFile.createNewFile()
    }
}

task writeTask {
    // 为task指定输入
    inputs.property('versionCode', this.ext.versionCode)
    inputs.property('versionName', this.ext.versionName)
    inputs.property('versionInfo', this.ext.versionInfo)
    // 为task指定输出
    outputs.file destFile
    doLast {
        def data = inputs.getProperties()
        File file = outputs.getFiles().getSingleFile()
        // 将map转化为实体对象
        def versionMsg = new VersionMsg(data)
        // 将实体对象转化为xml格式数据
        def sw = new StringWriter()
         def xmlBuilder = new MarkupBuilder(sw)
        if (file.text !=null && file.size() <=0){
            // 文件中没有内容
            xmlBuilder.release {
                release {
                    versionCode( versionMsg.versionCode)
                    versionName( versionMsg.versionName)
                    versionInfo( versionMsg.versionInfo)
                }
            }
            file.withWriter {writer -> writer.append(sw.toString())}
        }else{
            // 已有版本信息
            xmlBuilder.release {
                versionCode( versionMsg.versionCode)
                versionName( versionMsg.versionName)
                versionInfo( versionMsg.versionInfo)
            }

            // 将生成的xml数据插入到根节点结束前
            def lines = file.readLines()
            def lengths = lines.size() -1
            file.withWriter('UTF-8') {writer ->
                lines.eachWithIndex { String line, int index ->
                    if (index !=lengths){
                        writer.append(line + '\r\n')
                    }else if(index == lengths){
                        writer.append('\r\n' + sw.toString() + '\r\n')
                        writer.append(lines.get(lengths))
                    }
                }
            }
        }
    }
}
task readTask {
    inputs.file destFile
    doLast{
        def file = inputs.files.singleFile
        println file.text
    }
}

task taskTest{
    dependsOn readTask,writeTask
    doLast{
        println '输入输出任务结束'
    }
}

class VersionMsg{
    String versionCode;
    String versionName;
    String versionInfo;
}

/**
 * task 依赖
 */

task taskX{
    doLast {
        println 'taskX'
    }
}
task taskY{
    doLast {
        println 'taskY'
    }
}
//task taskZ(dependsOn: [taskX, taskY]){
task taskZ{
    dependsOn this.tasks.findAll {mTask ->
        return mTask.name.startsWith('lib')
    }
    doLast {
        println 'taskZ'
    }
}
//taskZ.dependsOn(taskX, taskY)
// << 表示doLast
task lib1  {
    doLast {
        println 'lib1'
    }
}
task lib2  {
    doLast {
        println 'lib2'
    }
}
task nlLib  {
    doLast {
        println 'nlLib'
    }
}

task handleReleaseFile {
    def srcFile = file('releases.xml')
    def destDir = new File(this.buildDir, 'generated/release/')
    doLast {
        println '开始解析对应的xml文件'
        destDir.mkdirs()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each {releaseNode ->
            // 解析每个release节点的内容
            def name = releaseNode.versionName.text()
            def versionCode = releaseNode.versionCode.text()
            def versionInfo = releaseNode.versionInfo.text()
            // 创建文件并写入节点数据
            def destFile = new File(destDir, "release-${name}.text")
            destFile.createNewFile()
            destFile.withWriter('UTF-8') {writer ->
                writer.write("${name} -> ${versionCode} -> ${versionInfo}")
            }
        }
    }
}

task handleReleaseFileTest(dependsOn: handleReleaseFile){
//task handleReleaseFileTest{
    def dir = fileTree(new File(this.buildDir, 'generated/release/'))
    println dir
    doLast {
        dir.each {
            println 'the file  is: ' + it
        }
        println '输出完成...'
    }
}

/**
 * 执行顺序指定
 */
task taskM{
    doLast {
        println 'taskM'
    }
}
task taskN{
    mustRunAfter taskM
    doLast {
        println 'taskN'
    }
}
task taskO{
    mustRunAfter taskN
    shouldRunAfter taskM
    doLast {
        println 'taskO'
    }
}